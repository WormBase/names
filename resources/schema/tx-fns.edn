[{:db/ident :wormbase.tx-fns/new-person
  :db/doc "Create a new person."
  :db/fn #db/fn
  {:lang "clojure"
   :params [db data]
   :code
   "(println \"TBD\")"}}

 {:db/ident :wormbase.tx-fns/deactivate-person
  :db/doc "Deactivate a person"
  :db/fn #db/fn
  {:lang "clojure"
   :params [db lookup-ref]
   :code
   "(when-let [person (d/entity db lookup-ref)]
      (let [active? (:person/active? person)]
        [[:db/cas lookup-ref :person/active? active? false]]))"}}

 {:db/ident :wormbase.tx-fns/latest-id
  :db/doc "Get the latest identifier for a given `ident`."
  :db/fn #db/fn
  {:params [db ident]
   :lang "clojure"
   :code
   "(d/q '[:find (max ?gid) .
           :in $ ?ident
           :where
           [?e ?ident ?gid]]
          (d/history db)
          ident))"}}

 {:db/ident :wormbase.tx-fns/latest-id-number
  :db/doc
  "Get the numeric suffix of the latest identifier for a given `ident`."
  :db/fn #db/fn
  {:params [db ident]
   :lang "clojure"
   :code
   "(if-not (d/entid db ident)
     (throw (ex-info \"Invalid ident\" {:ident ident}))
     (or (some->> (d/invoke db :wormbase.tx-fns/latest-id db ident)
                  (re-seq #\"0*(\\d+)\")
                  (flatten)
                  (last)
                  (read-string))
          0))"}}

 {:db/ident :wormbase.tx-fns/next-identifier
  :db/doc "Get the next sequential identifier for a given ident."
  :db/fn #db/fn
  {:params [db ident template]
   :lang "clojure"
   :code
   "(let [invoke (partial d/invoke db)
          last-id (invoke :wormbase.tx-fns/latest-id-number db ident)]
      (->> last-id inc (format template)))"}}

 {:db/ident :wormbase.tx-fns/gene-dbid-ref
  :db/doc "Return an identifier sutiable for inter-transaction referencing for new gene."
  :db/fn #db/fn
  {:lang "clojure"
   :params [db record]
   :code
   "(let [kwds (juxt :gene/sequence-name :gene/cgc-name)]
       (->> (kwds record)
            (filter identity)
            (first)))"}}

 {:db/ident :wormbase.tx-fns/new-unnamed-gene
  :db/doc "Create a new entity assigning an existing identifier."
  :db/fn #db/fn
  {:lang "clojure"
   :params [db data]
   :code
   "(let [invoke (partial d/invoke db)
          identifier (:gene/id data)
          species-lur (-> data :gene/species vec first)]
     [(-> data
          (assoc :gene/species species-lur)
          (assoc :gene/status :gene.status/live))])"}}

 {:db/ident :wormbase.tx-fns/new-gene
  :db/doc "Record a new WBGene."
  :db/fn #db/fn
  {:lang "clojure"
   :params [db data mint-new-id?]
   :code
   "(let [invoke (partial d/invoke db)
          ident :gene/id
          template (-> (d/entity db [:template/describes ident])
                       :template/format)
          new-gene-ref (invoke :wormbase.tx-fns/gene-dbid-ref db data)
          identify (fn [rec]
                     (let [gid (if mint-new-id?
                                 (invoke :wormbase.tx-fns/next-identifier
                                         db
                                         ident
                                         template)
                                 (:gene/id data))
                           species-lur (-> rec :gene/species vec first)]
                       (-> (assoc rec ident gid)
                           (assoc :gene/species species-lur)
                           (assoc :gene/status :gene.status/live))))
          new (-> data
                  identify
                  (assoc :db/id new-gene-ref))]
      [new])"}}

 {:db/ident :wormbase.tx-fns/resolve-refs
  :db/doc "Resolve references in a datomic entity mapping to numeric db ids in `em`."
  :db/fn #db/fn
  {:lang "clojure"
   :requires [[clojure.walk :as w]]
   :params [db em]
   :code
   "(w/prewalk
      (fn [x]
        (if (map? x)
          (reduce-kv (fn [m k v]
                       (cond
                         (and (map? v) (:db/id v))  (assoc m k (:db/id v))
                         (keyword? v) (assoc m k (d/entid db v))
                         :else (assoc m k v)))
                       {}
                       x)
          x))
       em)"}}

 {:db/ident :wormbase.tx-fns/collate-cas-batch
  :db/doc "Collate a collection of compare-and-swap operations."
  :db/fn #db/fn
  {:lang "clojure"
   :requires [[clojure.walk :as w]]
   :params [db entity data]
   :code
   "(let [resolve-refs (partial d/invoke
                                db
                                :wormbase.tx-fns/resolve-refs
                                db)
          eid (:db/id entity)
          e-keys (keys data)
          entity-map (d/pull db '[*] eid)
          new (resolve-refs data)
          res (some->> (map (fn [[k v]]
                              (let [old-v (k (resolve-refs entity-map))]
                               (when-not (or (nil? v)
                                             (= old-v v))
                                 [:db.fn/cas eid k old-v v])))
                             new)
                       (remove nil?))]
      res)"}}

 {:db/ident :wormbase.tx-fns/update-gene
  :db/doc "Update/add a names for given entity."
  :db/fn #db/fn
  {:lang "clojure"
   :params [db lur data]
   :code
   "(let [entity (d/entity db lur)
          eid (:db/id entity)
          collate-cas-batch (partial
                             d/invoke
                             db
                             :wormbase.tx-fns/collate-cas-batch
                             db
                             entity)
          tx-data (collate-cas-batch data)]
      tx-data)"}}

 {:db/ident :wormbase.tx-fns/set-many-ref
  :db/doc "Set the value for a cardinailty many reference."
  :db/fn #db/fn
  {:lang :clojure
   :params [db e attr new-vals]
   :code
   "(let [ent (or (d/entity db e)
                 (throw (ex-info \"Entity not found\"
                                   {:type :wormbase.db/missing
                                    :e e :t (d/basis-t db)})))
         entid (:db/id ent)
         old-vals (get ent attr)]
     (into (->> new-vals (map (partial vector :db/add entid attr)) (vec))
           (comp (remove (set new-vals))
                 (map (partial vector :db/retract entid attr)))
           old-vals))"}}]
