[{:db/ident :wormbase.tx-fns/new-person
  :db/doc "Create a new person."
  :db/fn #db/fn
  {:lang "clojure"
   :params [db data]
   :code
   "(println \"TBD\")"}}

 {:db/ident :wormbase.tx-fns/deactivate-person
  :db/doc "Deactivate a person"
  :db/fn #db/fn
  {:lang "clojure"
   :params [db lookup-ref]
   :code
   "(when-let [person (d/entity db lookup-ref)]
      (let [active? (:person/active? person)]
        [[:db/cas lookup-ref :person/active? active? false]]))"}}

 {:db/ident :wormbase.tx-fns/latest-id
  :db/doc "Get the latest identifier for a given `ident`."
  :db/fn #db/fn
  {:params [db ident]
   :lang "clojure"
   :code
   "(d/q '[:find (max ?gid) .
           :in $ ?ident
           :where
           [?e ?ident ?gid]]
          (d/history db)
          ident))"}}

 {:db/ident :wormbase.tx-fns/latest-id-number
  :db/doc
  "Get the numeric suffix of the latest identifier for a given `ident`."
  :db/fn #db/fn
  {:params [db ident]
   :lang "clojure"
   :code
   "(if-not (d/entid db ident)
     (throw (ex-info \"Invalid ident\" {:ident ident}))
     (or (some->> (d/invoke db :wormbase.tx-fns/latest-id db ident)
                  (re-seq #\"0*(\\d+)\")
                  (flatten)
                  (last)
                  (read-string))
          0))"}}

 {:db/ident :wormbase.tx-fns/next-identifier
  :db/doc "Get the next sequential identifier for a given ident."
  :db/fn #db/fn
  {:params [db ident template]
   :lang "clojure"
   :code
   "(let [invoke (partial d/invoke db)
          last-id (invoke :wormbase.tx-fns/latest-id-number db ident)]
      (->> last-id inc (format template)))"}}

 {:db/ident :wormbase.tx-fns/gene-dbid-ref
  :db/doc "Return an identifier sutiable for inter-transaction referencing for new gene."
  :db/fn #db/fn
  {:lang "clojure"
   :params [db record]
   :code
   "(let [kwds (juxt :gene/sequence-name :gene/cgc-name)]
       (->> (kwds record)
            (filter identity)
            (first)))"}}

 {:db/ident :wormbase.tx-fns/new
  :db/doc "Allocate a new name for entity"
  :db/fn #db/fn
  {:lang "clojure"
   :params [db entity-type data]
   :code
   "(let [invoke (partial d/invoke db)
          ident (keyword entity-type \"id\")
          template (-> (d/entity db [:template/describes ident])
                       :template/format)
          new-gene-ref (invoke :wormbase.tx-fns/gene-dbid-ref db data)
          identify (fn [rec]
                     (let [next-id (invoke
                                    :wormbase.tx-fns/next-identifier
                                    db
                                    ident
                                    template)
                           species-lur (-> rec :gene/species vec first)]
                       (-> (assoc rec ident next-id)
                           (assoc :gene/species species-lur)
                           (assoc :gene/status :gene.status/live))))
          new (-> data
                  identify
                  (assoc :db/id new-gene-ref))]
      [new])"}}

 {:db/ident :wormbase.tx-fns/resolve-gene-refs
  :db/doc "Resolve ref  erences in a gene entity suitable for CAS."
  :db/fn #db/fn
  {:lang "clojure"
   :params [db data]
   :code
   "(let [species-lur (-> data :gene/species vec first)
          species-entid (d/entid db species-lur)
          biotype-ident (get data :gene/biotype)
          biotype-entid (d/entid db biotype-ident)
          res (-> (merge data
                         (when biotype-entid
                           {:gene/biotype biotype-entid})
                         (when species-entid
                           {:gene/species species-entid}))
                  (vec)
                  (sort))]
        res)"}}

 {:db/ident :wormbase.tx-fns/collate-cas-batch
  :db/doc "Collate a collection of compare-and-swap operations."
  :db/fn #db/fn
  {:lang "clojure"
   :requires [[clojure.walk :as w]]
   :params [db entity data]
   :code
   "(let [resolve-refs (partial d/invoke
                                db
                                :wormbase.tx-fns/resolve-gene-refs
                                db)
          eid (:db/id entity)
          e-keys (keys data)
          entity->map (fn datomic-entity-to-array-map [ent]
                        (w/prewalk #(if (instance? datomic.query.EntityMap %)
                                      (into {} %)
                                      %)
                                   ent))
          existing (resolve-refs (entity->map entity))
          new (resolve-refs data)
          res (some->> (mapv (fn [[old-k old-v] [new-k new-v]]
                               (when-not (nil? new-v)
                                 [:db.fn/cas eid new-k old-v new-v]))
                             existing
                             new)
                       (filter identity))]
      res)"}}

 {:db/ident :wormbase.tx-fns/update-gene
  :db/doc "Update/add a names for given entity."
  :db/fn #db/fn
  {:lang "clojure"
   :params [db lur data]
   :code
   "(let [entity (d/entity db lur)
          eid (:db/id entity)
          collate-cas-batch (partial
                             d/invoke
                             db
                             :wormbase.tx-fns/collate-cas-batch
                             db
                             entity)
          tx-data (collate-cas-batch data)]
      tx-data)"}}

 {:db/ident :wormbase.tx-fns/merge-genes
  :db/doc "Merge gene `src` into gene `into`."
  :db/fn #db/fn
  {:lang "clojure"
   :params [db from-id into-id into-biotype]
   :code
   "(let [participants (->> [from-id into-id]
                            (interleave (repeat :gene/id))
                            (partition 2))]
       (let [[from into] (map #(d/entity db %) participants)]
         (when-let [deads (filter #(= (:gene/status %) :gene.status/dead)
                                  [from into])]
           (when-not (empty? deads)
             (throw (ex-info \"Both merge participants must be live\"
                             {:type :org.wormbase.db/conflict
                              :dead-genes (map :gene/id deads)}))))
         (when (some nil? [from into])
           (throw (ex-info \"Merge participant does not exist!\"
                            {:missing (remove (comp not nil?)
                                              (map :gene/id [from into]))
                             :type :org.wormbase.db/missing
                             :participants participants})))
          (let [entid (partial d/entid db)
                from-seq-name (:gene/sequence-name from)
                none? #(every? nil? %)
                uncloned-into? (none?
                                ((juxt :gene/biotype :gene/sequence-name)
                                 into))
                [sid tid] (map :db/id [from into])
                txes [[:db.fn/cas sid :gene/status
                                      (entid (:gene/status from))
                                      (entid :gene.status/dead)]
                      [:db.fn/cas tid :gene/biotype
                                      (entid (:gene/biotype into))
                                      (entid into-biotype)]]
                tx-data (if uncloned-into?
                          (-> txes
                              (conj
                               [:db/retract sid
                                :gene/sequence-name from-seq-name])
                              (conj
                               [:db.fn/cas tid
                                :gene/sequence-name nil from-seq-name]))
                          txes)]
             tx-data)))"}}

 {:db/ident :wormbase.tx-fns/split-gene
  :db/doc "Split gene `src` into a new gene."
  :db/fn #db/fn
  {:lang "clojure"
   :params [db gene-id data]
   :code
   "(if-let [gene (d/entity db [:gene/id gene-id])]
      (if (= (:gene/status gene) :gene.status/dead)
        (throw (ex-info \"Cannot split, gene specified is dead.\"
                        {:gene-id gene-id
                         :type :org.wormbase.db/conflict}))
      (let [{biotype :gene/biotype product :product} data
            {p-seq-name :gene/sequence-name p-bt :gene/biotype} product
            entid (partial d/entid db)
            bt-id (entid biotype)
            src (d/entity db [:gene/id gene-id])
            existing-bt-id (-> src :gene/biotype entid)
            species (-> src :gene/species :species/id)
            new-gene-data {:gene/species {:species/id species}
                           :gene/biotype p-bt
                           :gene/sequence-name p-seq-name
                           :db/id p-seq-name}
            tx-data [[:db.fn/cas [:gene/id gene-id]
                                  :gene/biotype
                                   existing-bt-id
                                   bt-id]
                     [:wormbase.tx-fns/new \"gene\" new-gene-data]]]
         tx-data))
     (throw (ex-info \"Gene does not exist\"
                     {:gene-id gene-id
                      :type :org.wormbase.db/missing})))"}}
 {:db/ident :wormbase.tx-fns/kill-gene
  :db/doc "Kill a gene"
  :db/fn #db/fn
  {:lang "clojure"
   :params [db lookup-ref]
   :code
   "(let [{{:keys [:db/ident]} :gene/status} (d/pull
                                              db
                                              '[{:gene/status [:db/ident]}]
                                              lookup-ref)]
      (when (= ident :gene.status/dead)
        (throw (ex-info \"Gene to be killed is already dead!\"
                        (merge
                          {:type :org.wormbase.db/conflict}
                          (apply array-map lookup-ref)))))
      (let [curr-status (d/entid db ident)]
        [[:db/cas lookup-ref :gene/status curr-status :gene.status/dead]]))"}}
 ]
